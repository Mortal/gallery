#!/usr/bin/env perl

# vim:set sw=4 sts=4 ts=4 noet:

use warnings;
use strict;

###############################################################################
# File system utilities

# Given the path from a folder to a subfolder, return the path from the
# subfolder to the folder.
sub basepath {
	my ($dir) = @_;
	$dir .= '/';
	$dir =~ s/^\.\///;
	$dir =~ s/[^\/]+/../g;
	return $dir;
}

# Return a list of entries in a directory.
sub direntries {
	my ($dir) = @_;
	my $dh;
	if (!opendir($dh, $dir)) {
		warn "Can't opendir $dir: $!";
		return ();
	}
	my @direntries = grep { !/^\./ } readdir($dh);
	closedir $dh;
	return sort @direntries;
}

# Return a list of subdirectories in a directory
sub subdirs {
	my ($dir) = @_;
	return reverse grep { !/^thumbs$/ && -d "$dir/$_" && !-e "$dir/$_/.galleryskip" } direntries $dir;
}

# Return a list of images in a directory
sub imagefiles {
	my ($dir) = @_;
	return grep { /\.(jpe?g|gif)$/i } direntries $dir;
}

# Read all of a file as a string
sub slurpfile {
	my ($filename) = @_;
	my $fd;
	if (!open($fd, '<', $filename)) {
		warn "Couldn't open $filename for reading: $!";
		return '';
	}
	my $contents;
	{
		local $/ = undef;
		$contents = <$fd>;
	}
	close $fd;
	return $contents;
}

###############################################################################
# Gallery HTML generator

# Return a string that should only be found in HTML files generated by us.
sub magic_marker { '<!-- autogenerated image gallery -->'; }

# Given a filename, is our magic marker in this file?
sub may_overwrite {
	my ($filename) = @_;
	my $contents = slurpfile $filename;
	return -1 < index $contents, magic_marker;
}

# Given an image filename, return the path to the thumbnail of this image.
sub thumbpath {
	my ($image) = @_;
	return "thumbs/$image";
}

# Given a base dir and a list of image filenames in this directory, make sure
# that all images have thumbnails.
sub checkthumbnails {
	my ($dir, @images) = @_;
	if (!-e "$dir/thumbs") {
		if (!mkdir("$dir/thumbs")) {
			warn "Couldn't create directory $dir/thumbs: $!";
			return;
		}
	}
	for my $img (@images) {
		checkthumbnail($dir, $img);
	}
}

# Make sure a certain image has a thumbnail.
sub checkthumbnail {
	my ($dir, $img) = @_;
	my $thumbpath = thumbpath $img;
	if (-e "$dir/$thumbpath") {
		return;
	}
	print "Thumbnailing $dir/$thumbpath\n";
	system 'convert', '-resize', '200x200', "$dir/$img", "$dir/$thumbpath";
}

# Generate single picture view pages for all the images given.
sub viewpages {
	my ($dir, @pages) = @_;
	my $prev = [];
	my $cur = shift @pages;
	for my $next (@pages, []) {
		viewpage($dir, $prev, $cur, $next);
		$prev = $cur;
		$cur = $next;
	}
}

# Given an image filename, return the corresponding view filename.
sub viewpagename {
	my ($name) = @_;
	$name =~ s/\.[^.]*$|$/\.html/;
	return $name;
}

# Generate the view page for a single picture.
sub viewpage {
	my ($dir, $prev, $cur, $next) = @_;
	my $basepath = basepath $dir;
	my $htmlname = viewpagename $cur;
	$prev = ('' eq ref $prev) ? viewpagename($prev) : '.';
	$next = ('' eq ref $next) ? viewpagename($next) : '.';
	if (-e "$dir/$htmlname") { return; }
	print "Generate view page $dir/$htmlname\n";
	my $fh;
	open $fh, '>', "$dir/$htmlname";
	print $fh <<HTML;
<!DOCTYPE html><html><head><script type=\"text/javascript\" src=\"${basepath}script.js\"></script>
<link rel=\"stylesheet\" type=\"text/css\" href=\"${basepath}imagestyle.css\" /></head>
<body><a href=\"$prev\" id=\"prev\">&larr;</a>
<a href=\"$next\"><img src=\"$cur\" /></a>
<a href=\"$next\" id=\"next\">&rarr;</a></body></html>
HTML
	close $fh;
}

# Generate index.html and view pages for a certain directory, recursing into
# subdirectories as necessary.
sub generate_for_directory {
	my ($dir, $hasparent) = @_;

	my $index = "$dir/index.html";
	if (-e $index) {
		if (!may_overwrite($index)) {
			warn "Skipping $dir since an index.html already exists";
			return;
		}
	}

	my @subdirs = subdirs $dir;
	for my $subdir (@subdirs) {
		generate_for_directory("$dir/$subdir", 1);
	}

	my $fd;
	if (!open($fd, '>', $index)) {
		warn "Couldn't open $index for writing: $!";
		return;
	}
	print "Generating $index\n";
	printheader($fd, $dir);
	if ($hasparent) {
		unshift @subdirs, '..';
	}
	my @subindexes = grep { -e "$dir/$_/index.html" } @subdirs;
	if (@subindexes) {
		printsubgalleries($fd, @subindexes);
	}
	my @images = imagefiles $dir;
	if (@images) {
		checkthumbnails $dir, @images;
		viewpages $dir, @images;
		printimages($fd, @images);
	}
	printfooter($fd);
}

###############################################################################
# HTML fragment printers

# Print HTML header to a file descriptor
sub printheader {
	my ($fd, $dir) = @_;
	my $style = basepath($dir).'style.css';
	my $mm = magic_marker;
	print $fd <<HTML;
<!DOCTYPE html>
$mm
<html>
<head>
<meta charset="utf-8" />
<title>Galleri af $dir</title>
<link rel="stylesheet" type="text/css" href="$style" />
<script type="text/javascript">
window.onkeydown = function (ev) {
	if (!ev) ev = window.event;
	if (ev.keyCode == 8) // backspace
		location.href = "..";
	if (ev.keyCode == 39) // right
		location.href = (document.getElementById('first') || document.links[1] || document.links[0]).href;
};
</script>
</head>
<body>
HTML
}

# Print the list of subgalleries of a directory to an index.html
sub printsubgalleries {
	my ($fd, @dirs) = @_;
	print $fd "<ul id=\"subgalleries\">\n";
	for my $dir (@dirs) {
		my $printdir = $dir;
		if ($printdir eq '..') {
			$printdir = "Tilbage til forrige";
		}
		print $fd "<li><a href=\"$dir/\">$printdir</a></li>\n";
	}
	print $fd "</ul>\n";
}

# Print the list of thumbnails of images in a directory to an index.html
sub printimages {
	my ($fd, @images) = @_;
	print $fd "<ul id=\"images\">\n";
	my $first = " id=\"first\"";
	for my $img (@images) {
		my $page = viewpagename $img;
		print $fd "<li><a href=\"$page\"$first><img src=\"".thumbpath($img)."\" /></a></li>\n";
		$first = '';
	}
	print $fd "</ul>\n";
}

# Print HTML footer
sub printfooter {
	my ($fd) = @_;
	print $fd <<HTML;
</body>
</html>
HTML
}

###############################################################################
# Program main entry point

for my $arg (@ARGV) {
	generate_for_directory $arg;
}
